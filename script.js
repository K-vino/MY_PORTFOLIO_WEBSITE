// script.js
// Author: Vino K. (Generated by Gemini)
// Description: Main JavaScript file for Vino K's personal portfolio website.
// Handles dynamic functionalities, animations, UI interactions, and Firebase integration.
// Version: 1.0.0
// Last Updated: June 21, 2025

/* ======================================================= */
/* GLOBAL VARIABLES & IMPORTS              */
/* ======================================================= */

// Firebase Imports (ensure these are correctly imported from the CDN in your HTML)
// Example: <script type="module" src="https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js"></script>
// The following imports assume you have already added the Firebase SDKs in your HTML as modules:
// import { initializeApp } from "firebase/app";
// import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "firebase/auth";
// import { getFirestore, collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from "firebase/firestore";

// Declare Firebase variables globally (will be initialized in DOMContentLoaded)
let app;
let db;
let auth;
let userId; // User ID for Firestore operations

// Configuration variables provided by the Canvas environment (MUST BE USED)
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// DOM Elements Cache
const DOMElements = {
    // Header & Navigation
    header: null,
    navbar: null,
    navList: null,
    navLinks: null,
    menuIcon: null,
    darkModeToggle: null,
    themeCustomizerToggle: null,
    themeCustomizer: null,
    customizerCloseBtn: null,
    colorOptions: null,
    fontSizeOptions: null,
    resetThemeBtn: null,
    skipLink: null,

    // Home Section
    homeSection: null,
    typedSubtitle: null,
    liveTimeSpan: null,
    homeButtons: null,
    homeProfileImg: null,
    homeImageBlob: null,

    // Scroll Indicators
    scrollProgressBar: null,
    backToTopBtn: null,

    // Skills Section
    skillsChartCanvas: null,

    // Contact Form
    contactForm: null,
    contactName: null,
    contactEmail: null,
    contactMessage: null,
    contactSubmitBtn: null,

    // Guestbook Section
    guestbookForm: null,
    guestbookName: null,
    guestbookMessage: null,
    guestbookSubmitBtn: null,
    guestbookMessagesContainer: null,

    // Preloader
    preloader: null,
    preloaderText: null,

    // Custom Cursor
    cursorDot: null,
    cursorOutline: null,

    // Modals
    messageBox: null,
    messageBoxText: null,
    messageBoxCloseBtn: null,
};

// Application State
const appState = {
    isAuthReady: false,
    activeSection: 'home', // For navbar highlighting
    theme: {
        primaryColor: '#754ef9',
        isLightMode: false,
        fontSize: 'base',
    },
    debounceTimer: null,
    throttleTimer: null,
};

// Constants
const DEBOUNCE_DELAY = 100;
const THROTTLE_DELAY = 16; // Approx. 60 FPS
const SCROLL_OFFSET = 80; // Offset for active nav link calculation

/* ======================================================= */
/* HELPER FUNCTIONS                      */
/* ======================================================= */

/**
 * Utility function to safely get a DOM element.
 * @param {string} selector - The CSS selector for the element.
 * @returns {HTMLElement | null} The element or null if not found.
 */
function getElement(selector) {
    const element = document.querySelector(selector);
    if (!element) {
        console.warn(`Element with selector "${selector}" not found.`);
    }
    return element;
}

/**
 * Utility function to safely get all DOM elements matching a selector.
 * @param {string} selector - The CSS selector for the elements.
 * @returns {NodeListOf<HTMLElement>} A NodeList of elements.
 */
function getAllElements(selector) {
    const elements = document.querySelectorAll(selector);
    if (!elements.length) {
        // console.warn(`No elements found for selector "${selector}".`);
    }
    return elements;
}

/**
 * Debounce function to limit how often a function can run.
 * @param {Function} func - The function to debounce.
 * @param {number} delay - The debounce delay in milliseconds.
 * @returns {Function} The debounced function.
 */
function debounce(func, delay) {
    return function (...args) {
        clearTimeout(appState.debounceTimer);
        appState.debounceTimer = setTimeout(() => func.apply(this, args), delay);
    };
}

/**
 * Throttle function to limit how often a function can run per unit of time.
 * @param {Function} func - The function to throttle.
 * @param {number} delay - The throttle delay in milliseconds.
 * @returns {Function} The throttled function.
 */
function throttle(func, delay) {
    let lastExec = 0;
    return function (...args) {
        const now = Date.now();
        if (now - lastExec > delay) {
            lastExec = now;
            func.apply(this, args);
        }
    };
}

/**
 * Generates a UUID (Universally Unique Identifier).
 * @returns {string} A UUID string.
 */
function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0;
        const v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

/**
 * Saves a preference to localStorage.
 * @param {string} key - The key for the preference.
 * @param {any} value - The value to store.
 */
function savePreference(key, value) {
    try {
        localStorage.setItem(key, JSON.stringify(value));
    } catch (e) {
        console.error("Error saving preference to localStorage:", e);
    }
}

/**
 * Loads a preference from localStorage.
 * @param {string} key - The key for the preference.
 * @param {any} defaultValue - The default value if the key is not found.
 * @returns {any} The loaded value or the default value.
 */
function loadPreference(key, defaultValue) {
    try {
        const value = localStorage.getItem(key);
        return value ? JSON.parse(value) : defaultValue;
    } catch (e) {
        console.error("Error loading preference from localStorage:", e);
        return defaultValue;
    }
}

/**
 * Displays a custom message box instead of alert.
 * @param {string} message - The message to display.
 * @param {string} type - Type of message (e.g., 'success', 'error', 'info').
 */
function showMessageBox(message, type = 'info') {
    const msgBox = DOMElements.messageBox;
    const msgText = DOMElements.messageBoxText;

    if (!msgBox || !msgText) {
        console.warn('Message box elements not found. Falling back to console log.');
        console.log(`Message (${type}): ${message}`);
        return;
    }

    msgText.textContent = message;
    msgBox.className = `message-box ${type}`; // Reset classes and add type
    msgBox.style.display = 'flex'; // Show it

    // Hide after a few seconds
    setTimeout(() => {
        msgBox.style.display = 'none';
    }, 5000);
}

/**
 * Handles closing the custom message box.
 */
function closeMessageBox() {
    if (DOMElements.messageBox) {
        DOMElements.messageBox.style.display = 'none';
    }
}

/* ======================================================= */
/* 1. PRELOADER LOGIC                     */
/* ======================================================= */

/**
 * Initializes the preloader, showing it and then fading it out
 * when all page content and assets are loaded.
 */
function initPreloader() {
    if (DOMElements.preloader) {
        window.addEventListener('load', () => {
            // Give a small delay for the animation to play
            setTimeout(() => {
                DOMElements.preloader.classList.add('hidden');
                document.body.style.overflow = ''; // Restore scroll
            }, 500); // Wait for 0.5s after load
        });
        document.body.style.overflow = 'hidden'; // Hide scroll during preloader
    }
}

/* ======================================================= */
/* 2. CUSTOM CURSOR LOGIC                 */
/* ======================================================= */

/**
 * Initializes the custom cursor to follow the mouse.
 */
function initCustomCursor() {
    if (!DOMElements.cursorDot || !DOMElements.cursorOutline) return;

    // Use GSAP for smooth cursor movement
    gsap.set(DOMElements.cursorDot, { xPercent: -50, yPercent: -50 });
    gsap.set(DOMElements.cursorOutline, { xPercent: -50, yPercent: -50 });

    const cursorX = { value: 0 };
    const cursorY = { value: 0 };

    window.addEventListener('mousemove', (e) => {
        gsap.to(cursorX, { value: e.clientX, duration: 0.1 });
        gsap.to(cursorY, { value: e.clientY, duration: 0.1 });
    });

    gsap.ticker.add(() => {
        gsap.set(DOMElements.cursorDot, { x: cursorX.value, y: cursorY.value });
        gsap.to(DOMElements.cursorOutline, {
            x: cursorX.value,
            y: cursorY.value,
            duration: 0.2, // Slightly slower than dot for trail effect
            ease: "power2.out"
        });
    });
}

/* ======================================================= */
/* 3. SCROLL PROGRESS BAR LOGIC             */
/* ======================================================= */

/**
 * Updates the scroll progress bar based on current scroll position.
 */
function updateScrollProgressBar() {
    if (!DOMElements.scrollProgressBar) return;
    const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
    const scrollPercent = (scrollTop / (scrollHeight - clientHeight)) * 100;
    DOMElements.scrollProgressBar.style.width = `${scrollPercent}%`;
}

/* ======================================================= */
/* 4. BACK TO TOP BUTTON LOGIC              */
/* ======================================================= */

/**
 * Shows or hides the back-to-top button based on scroll position.
 */
function toggleBackToTopButton() {
    if (!DOMElements.backToTopBtn) return;
    if (window.scrollY > 300) {
        DOMElements.backToTopBtn.classList.add('show');
    } else {
        DOMElements.backToTopBtn.classList.remove('show');
    }
}

/**
 * Scrolls the page to the top smoothly.
 */
function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

/* ======================================================= */
/* 5. HEADER & NAVIGATION LOGIC             */
/* ======================================================= */

/**
 * Adds or removes the 'scrolled' class to the header.
 */
function handleStickyHeader() {
    if (!DOMElements.header) return;
    if (window.scrollY > 50) {
        DOMElements.header.classList.add('scrolled');
    } else {
        DOMElements.header.classList.remove('scrolled');
    }
}

/**
 * Highlights the active navigation link based on scroll position.
 */
function highlightActiveNavLink() {
    if (!DOMElements.navLinks) return;

    const sections = getAllElements('section[id]');
    let currentActiveSection = appState.activeSection;

    sections.forEach(section => {
        const sectionTop = section.offsetTop - DOMElements.header.offsetHeight - SCROLL_OFFSET;
        const sectionBottom = sectionTop + section.offsetHeight;

        if (window.scrollY >= sectionTop && window.scrollY < sectionBottom) {
            currentActiveSection = section.id;
        }
    });

    if (currentActiveSection !== appState.activeSection) {
        appState.activeSection = currentActiveSection;
        DOMElements.navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href').includes(appState.activeSection)) {
                link.classList.add('active');
            }
        });
    }
}

/**
 * Toggles the mobile navigation menu.
 */
function toggleMobileMenu() {
    if (!DOMElements.navbar || !DOMElements.menuIcon) return;
    DOMElements.navbar.classList.toggle('active');
    DOMElements.menuIcon.classList.toggle('active');
    document.body.classList.toggle('no-scroll'); // Optional: prevent scroll when menu is open
}

/**
 * Sets up smooth scrolling for all navigation links.
 */
function setupSmoothScrolling() {
    if (!DOMElements.navLinks) return;
    DOMElements.navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetSection = document.getElementById(targetId);

            if (targetSection) {
                // Close mobile menu if open
                if (DOMElements.navbar && DOMElements.navbar.classList.contains('active')) {
                    toggleMobileMenu();
                }

                // Smooth scroll to section, accounting for fixed header
                const offsetTop = targetSection.offsetTop - DOMElements.header.offsetHeight;
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });
}

/* ======================================================= */
/* 6. THEME CUSTOMIZER LOGIC                */
/* ======================================================= */

/**
 * Loads and applies saved theme preferences.
 */
function loadThemePreferences() {
    const savedTheme = loadPreference('portfolioTheme', {
        primaryColor: '#754ef9',
        isLightMode: false,
        fontSize: 'base'
    });
    appState.theme = savedTheme;

    applyPrimaryColor(savedTheme.primaryColor);
    applyLightMode(savedTheme.isLightMode);
    applyFontSize(savedTheme.fontSize);

    // Update customizer UI
    updateThemeCustomizerUI();
}

/**
 * Applies the primary color to CSS variables.
 * @param {string} color - The hex color code.
 */
function applyPrimaryColor(color) {
    document.documentElement.style.setProperty('--primary-color', color);
    // Adjust light/dark accents based on primary color if needed, or define distinct vars
    // For simplicity, we are just changing --primary-color.
    appState.theme.primaryColor = color;
    savePreference('portfolioTheme', appState.theme);
}

/**
 * Applies light/dark mode class to the body.
 * @param {boolean} isLight - True for light mode, false for dark.
 */
function applyLightMode(isLight) {
    document.body.classList.toggle('light-mode', isLight);
    appState.theme.isLightMode = isLight;
    savePreference('portfolioTheme', appState.theme);
}

/**
 * Applies font size class to the body.
 * @param {string} size - 'small', 'base', or 'large'.
 */
function applyFontSize(size) {
    document.body.classList.remove('font-small', 'font-large');
    if (size !== 'base') {
        document.body.classList.add(`font-${size}`);
    }
    appState.theme.fontSize = size;
    savePreference('portfolioTheme', appState.theme);
}

/**
 * Updates the UI of the theme customizer to reflect current settings.
 */
function updateThemeCustomizerUI() {
    if (!DOMElements.colorOptions || !DOMElements.fontSizeOptions) return;

    // Highlight active color
    DOMElements.colorOptions.forEach(box => {
        box.classList.remove('active');
        if (box.dataset.color === appState.theme.primaryColor) {
            box.classList.add('active');
        }
    });

    // Highlight active font size
    DOMElements.fontSizeOptions.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.size === appState.theme.fontSize) {
            btn.classList.add('active');
        }
    });

    // Update dark mode toggle icon
    if (DOMElements.darkModeToggle) {
        if (appState.theme.isLightMode) {
            DOMElements.darkModeToggle.querySelector('.fa-moon').style.display = 'none';
            DOMElements.darkModeToggle.querySelector('.fa-sun').style.display = 'inline-block';
        } else {
            DOMElements.darkModeToggle.querySelector('.fa-moon').style.display = 'inline-block';
            DOMElements.darkModeToggle.querySelector('.fa-sun').style.display = 'none';
        }
    }
}

/**
 * Initializes the theme customizer functionality.
 */
function initThemeCustomizer() {
    if (!DOMElements.themeCustomizerToggle || !DOMElements.themeCustomizer || !DOMElements.customizerCloseBtn) return;

    DOMElements.themeCustomizerToggle.addEventListener('click', () => {
        DOMElements.themeCustomizer.classList.add('active');
    });

    DOMElements.customizerCloseBtn.addEventListener('click', () => {
        DOMElements.themeCustomizer.classList.remove('active');
    });

    // Toggle Dark Mode
    if (DOMElements.darkModeToggle) {
        DOMElements.darkModeToggle.addEventListener('click', () => {
            applyLightMode(!appState.theme.isLightMode);
            updateThemeCustomizerUI(); // Keep UI in sync
        });
    }

    // Color Options
    DOMElements.colorOptions.forEach(box => {
        box.addEventListener('click', () => {
            applyPrimaryColor(box.dataset.color);
            updateThemeCustomizerUI();
        });
    });

    // Font Size Options
    DOMElements.fontSizeOptions.forEach(btn => {
        btn.addEventListener('click', () => {
            applyFontSize(btn.dataset.size);
            updateThemeCustomizerUI();
        });
    });

    // Reset Theme
    if (DOMElements.resetThemeBtn) {
        DOMElements.resetThemeBtn.addEventListener('click', () => {
            applyPrimaryColor('#754ef9'); // Default primary
            applyLightMode(false); // Default dark mode
            applyFontSize('base'); // Default font size
            updateThemeCustomizerUI();
            showMessageBox('Theme reset to default!', 'info');
        });
    }

    loadThemePreferences(); // Load preferences on init
}

/* ======================================================= */
/* 7. BUTTON RIPPLE EFFECT                */
/* ======================================================= */

/**
 * Adds a ripple effect to a button when clicked.
 * @param {MouseEvent} e - The click event.
 */
function addRippleEffect(e) {
    const button = e.currentTarget;
    if (!button) return;

    // Create ripple element
    const circle = document.createElement('span');
    const diameter = Math.max(button.offsetWidth, button.offsetHeight);
    const radius = diameter / 2;

    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${e.clientX - (button.getBoundingClientRect().left + radius)}px`;
    circle.style.top = `${e.clientY - (button.getBoundingClientRect().top + radius)}px`;
    circle.classList.add('ripple');

    // Remove existing ripple if any
    const existingRipple = button.querySelector('.ripple');
    if (existingRipple) {
        existingRipple.remove();
    }

    button.appendChild(circle);

    // Trigger animation
    circle.classList.add('animate');
    circle.addEventListener('animationend', () => {
        circle.remove();
    });
}


/* ======================================================= */
/* 8. TYPED.JS INTEGRATION                  */
/* ======================================================= */

/**
 * Initializes the Typed.js library for dynamic text.
 */
function initTypedText() {
    if (DOMElements.typedSubtitle && typeof Typed !== 'undefined') {
        new Typed('.multiple-text', {
            strings: ["Data Engineer", "Full Stack Developer", "AI Enthusiast", "Hackathon Participant", "Cloud Architect"],
            typeSpeed: 70,
            backSpeed: 50,
            backDelay: 1500,
            loop: true,
            showCursor: true,
            cursorChar: '|',
        });
    }
}

/* ======================================================= */
/* 9. AOS (ANIMATE ON SCROLL) INTEGRATION   */
/* ======================================================= */

/**
 * Initializes the AOS library for scroll animations.
 */
function initAOS() {
    if (typeof AOS !== 'undefined') {
        AOS.init({
            duration: 1000,     // animations for 1 second
            once: true,         // animations once
            mirror: false,      // whether animation should happen only once - while scrolling down
            easing: 'ease-in-out', // easing for AOS animations
            offset: 150,        // offset (in px) from the original trigger point
        });
    }
}

/* ======================================================= */
/* 10. CHART.JS FOR SKILLS RADAR CHART      */
/* ======================================================= */

/**
 * Initializes the Chart.js radar chart for skills visualization.
 */
function initSkillsChart() {
    if (DOMElements.skillsChartCanvas && typeof Chart !== 'undefined') {
        const ctx = DOMElements.skillsChartCanvas.getContext('2d');

        const skillsData = {
            labels: ['Data Modeling', 'ETL/ELT', 'Cloud (AWS)', 'Web Dev (Full Stack)', 'ML/AI', 'SQL', 'Python'],
            datasets: [{
                label: 'Proficiency',
                data: [90, 85, 75, 80, 70, 95, 90], // Scale of 0-100
                backgroundColor: 'rgba(117, 78, 249, 0.4)', // Primary color with transparency
                borderColor: 'rgba(117, 78, 249, 1)',
                pointBackgroundColor: 'rgba(80, 227, 194, 1)', // Accent color
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgba(80, 227, 194, 1)',
                borderWidth: 2,
                fill: true,
            }]
        };

        const skillsOptions = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                r: {
                    angleLines: {
                        color: 'rgba(255, 255, 255, 0.1)' // Light gray lines
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.2)' // Slightly darker grid lines
                    },
                    pointLabels: {
                        font: {
                            size: 14,
                            family: 'Poppins',
                            weight: '600'
                        },
                        color: 'var(--text-color)' // Skill labels color
                    },
                    ticks: {
                        display: false, // Hide the numerical ticks
                        max: 100,
                        min: 0,
                        stepSize: 20
                    },
                    suggestedMin: 0,
                    suggestedMax: 100
                }
            },
            plugins: {
                legend: {
                    display: false // Hide dataset legend
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.7)',
                    titleColor: 'var(--primary-color)',
                    bodyColor: 'var(--text-color)',
                    bodyFont: {
                        size: 14,
                        family: 'Poppins'
                    },
                    displayColors: false,
                    callbacks: {
                        label: function(context) {
                            return `${context.label}: ${context.raw}%`;
                        }
                    }
                }
            },
            animation: {
                onComplete: () => {
                    // This is a placeholder for any post-animation logic
                    // For example, trigger another animation or show a message
                }
            }
        };

        new Chart(ctx, {
            type: 'radar',
            data: skillsData,
            options: skillsOptions,
        });
    }
}

/* ======================================================= */
/* 11. LIVE TIME DISPLAY                    */
/* ======================================================= */

/**
 * Updates the live time display in the footer every second.
 */
function updateLiveTime() {
    if (!DOMElements.liveTimeSpan) return;

    const now = new Date();
    const options = {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
    };
    DOMElements.liveTimeSpan.textContent = now.toLocaleDateString('en-US', options);
}

/* ======================================================= */
/* 12. GSAP ANIMATIONS (ADVANCED)           */
/* ======================================================= */

/**
 * Initializes GSAP for various page animations.
 */
function initGSAPAnimations() {
    // Ensure GSAP is loaded
    if (typeof gsap === 'undefined') {
        console.warn('GSAP not loaded. Skipping GSAP animations.');
        return;
    }

    // Hero Section Entrance Animation
    gsap.from(DOMElements.homeProfileImg, {
        duration: 1.5,
        scale: 0.8,
        opacity: 0,
        ease: "back.out(1.7)",
        delay: 0.8
    });
    gsap.from(".home-content > *:not(.home-image-blob)", { // Select direct children of home-content, excluding image blob
        duration: 1,
        y: 50,
        opacity: 0,
        stagger: 0.15,
        ease: "power3.out",
        delay: 0.3
    });

    // Section Title Bounce-in Effect
    gsap.utils.toArray('.section-title').forEach(title => {
        gsap.from(title, {
            scrollTrigger: {
                trigger: title,
                start: "top 85%", // When top of title hits 85% of viewport
                toggleActions: "play none none none", // Play once on enter
            },
            y: -50,
            opacity: 0,
            scale: 0.8,
            duration: 1,
            ease: "back.out(1.7)",
            delay: 0.2
        });
    });

    // Floating Background Elements in Home (GSAP instead of simple CSS background-move)
    const floatingIconsContainer = document.createElement('div');
    floatingIconsContainer.className = 'floating-icons-container';
    floatingIconsContainer.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        overflow: hidden;
        z-index: 0;
    `;
    DOMElements.homeSection.appendChild(floatingIconsContainer);

    const icons = [
        '<i class="fas fa-code"></i>', '<i class="fas fa-brain"></i>', '<i class="fas fa-database"></i>',
        '<i class="fab fa-aws"></i>', '<i class="fab fa-react"></i>', '<i class="fab fa-node-js"></i>',
        '<i class="fas fa-cloud"></i>', '<i class="fas fa-cogs"></i>', '<i class="fas fa-stream"></i>',
        '<i class="fas fa-project-diagram"></i>'
    ];

    for (let i = 0; i < 20; i++) {
        const icon = document.createElement('div');
        icon.innerHTML = icons[Math.floor(Math.random() * icons.length)];
        icon.style.cssText = `
            position: absolute;
            color: var(--primary-color);
            opacity: 0.05;
            font-size: ${gsap.utils.random(30, 80)}px;
        `;
        floatingIconsContainer.appendChild(icon);

        gsap.to(icon, {
            x: gsap.utils.random(-window.innerWidth / 2, window.innerWidth / 2),
            y: gsap.utils.random(-window.innerHeight / 2, window.innerHeight / 2),
            rotation: gsap.utils.random(0, 360),
            scale: gsap.utils.random(0.5, 1.5),
            opacity: gsap.utils.random(0.02, 0.1),
            duration: gsap.utils.random(15, 30),
            ease: "none",
            repeat: -1,
            yoyo: true,
            delay: -gsap.utils.random(0, 15) // Stagger start times
        });
    }

    // Enhanced Project Card Hover (using GSAP for more control)
    // Removed direct CSS transform for project-card:hover to let GSAP handle it
    gsap.utils.toArray(".project-card").forEach(card => {
        gsap.set(card, { transformOrigin: "center center" });
        gsap.to(card, {
            y: -15,
            rotationX: 5,
            boxShadow: "0 12px 24px rgba(0, 0, 0, 0.4)",
            borderColor: "var(--primary-color)",
            duration: 0.3,
            ease: "power2.out",
            paused: true,
            // 3D effect:
            z: 20
        });

        card.addEventListener("mouseenter", () => gsap.to(card, {
            y: -15,
            rotationX: 5,
            boxShadow: "0 12px 24px rgba(0, 0, 0, 0.4)",
            borderColor: "var(--primary-color)",
            duration: 0.3,
            ease: "power2.out",
            z: 20
        }));
        card.addEventListener("mouseleave", () => gsap.to(card, {
            y: 0,
            rotationX: 0,
            boxShadow: "0 8px 16px rgba(0, 0, 0, 0.3)", // Default shadow
            borderColor: "rgba(255, 255, 255, 0.1)", // Default border
            duration: 0.3,
            ease: "power2.out",
            z: 0
        }));
    });

    // Enhanced Service Card Hover (using GSAP for more control)
    gsap.utils.toArray(".service-card").forEach(card => {
        gsap.set(card, { transformOrigin: "center center" });
        gsap.to(card, {
            y: -10,
            rotationX: 5,
            boxShadow: "0 8px 16px rgba(0, 0, 0, 0.3)",
            borderColor: "var(--primary-color)",
            duration: 0.3,
            ease: "power2.out",
            z: 10,
            paused: true
        });

        card.addEventListener("mouseenter", () => gsap.to(card, {
            y: -10,
            rotationX: 5,
            boxShadow: "0 8px 16px rgba(0, 0, 0, 0.3)",
            borderColor: "var(--primary-color)",
            duration: 0.3,
            ease: "power2.out",
            z: 10
        }));
        card.addEventListener("mouseleave", () => gsap.to(card, {
            y: 0,
            rotationX: 0,
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
            borderColor: "rgba(255, 255, 255, 0.1)",
            duration: 0.3,
            ease: "power2.out",
            z: 0
        }));
    });


    // Optional: Parallax effect for home background (if you have specific elements)
    // Example: if you had a specific background image or element in .home
    // gsap.to(".home-background-element", {
    //     yPercent: 20,
    //     ease: "none",
    //     scrollTrigger: {
    //         trigger: ".home",
    //         start: "top top",
    //         end: "bottom top",
    //         scrub: true
    //     }
    // });
}

/* ======================================================= */
/* 13. PARTICLE.JS BACKGROUND (Example for Home)*/
/* ======================================================= */

/**
 * Initializes Particle.js for a dynamic background effect.
 * Needs to be loaded from CDN: <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
 *
 * NOTE: The HTML must have a div with id="particles-js" within the desired section (e.g., home).
 * CSS for #particles-js:
 * #particles-js {
 * position: absolute;
 * width: 100%;
 * height: 100%;
 * background-color: transparent; // Ensure it's transparent to show background-color of parent
 * z-index: 1; // Below content, above static background
 * top: 0;
 * left: 0;
 * }
 */
function initParticlesJS() {
    if (typeof particlesJS === 'undefined') {
        console.warn('particles.js not loaded. Skipping particle background.');
        return;
    }

    if (!getElement('#particles-js')) {
        console.warn('Element #particles-js not found. Particle background will not render.');
        return;
    }

    particlesJS('particles-js', {
        "particles": {
            "number": {
                "value": 80,
                "density": {
                    "enable": true,
                    "value_area": 800
                }
            },
            "color": {
                "value": "#754ef9" // Primary color for particles
            },
            "shape": {
                "type": "circle",
                "stroke": {
                    "width": 0,
                    "color": "#000000"
                },
                "polygon": {
                    "nb_sides": 5
                },
                "image": {
                    "src": "img/github.svg",
                    "width": 100,
                    "height": 100
                }
            },
            "opacity": {
                "value": 0.5,
                "random": false,
                "anim": {
                    "enable": false,
                    "speed": 1,
                    "opacity_min": 0.1,
                    "sync": false
                }
            },
            "size": {
                "value": 3,
                "random": true,
                "anim": {
                    "enable": false,
                    "speed": 40,
                    "size_min": 0.1,
                    "sync": false
                }
            },
            "line_linked": {
                "enable": true,
                "distance": 150,
                "color": "#50e3c2", // Accent color for lines
                "opacity": 0.4,
                "width": 1
            },
            "move": {
                "enable": true,
                "speed": 6,
                "direction": "none",
                "random": false,
                "straight": false,
                "out_mode": "out",
                "bounce": false,
                "attract": {
                    "enable": false,
                    "rotateX": 600,
                    "rotateY": 1200
                }
            }
        },
        "interactivity": {
            "detect_on": "canvas",
            "events": {
                "onhover": {
                    "enable": true,
                    "mode": "grab"
                },
                "onclick": {
                    "enable": true,
                    "mode": "push"
                },
                "resize": true
            },
            "modes": {
                "grab": {
                    "distance": 140,
                    "line_linked": {
                        "opacity": 1
                    }
                },
                "bubble": {
                    "distance": 400,
                    "size": 40,
                    "duration": 2,
                    "opacity": 8,
                    "speed": 3
                },
                "repulse": {
                    "distance": 200,
                    "duration": 0.4
                },
                "push": {
                    "particles_nb": 4
                },
                "remove": {
                    "particles_nb": 2
                }
            }
        },
        "retina_detect": true
    });
}


/* ======================================================= */
/* 14. CONTACT FORM SUBMISSION (Client-Side)*/
/* ======================================================= */

/**
 * Handles the contact form submission. (Currently client-side only, backend needed for actual send)
 * @param {Event} e - The form submission event.
 */
async function handleContactFormSubmit(e) {
    e.preventDefault(); // Prevent default form submission

    if (!DOMElements.contactForm || !DOMElements.contactName || !DOMElements.contactEmail || !DOMElements.contactMessage) {
        showMessageBox('Form elements not found.', 'error');
        return;
    }

    const name = DOMElements.contactName.value.trim();
    const email = DOMElements.contactEmail.value.trim();
    const message = DOMElements.contactMessage.value.trim();

    // Basic client-side validation
    if (!name || !email || !message) {
        showMessageBox('Please fill in all fields.', 'error');
        return;
    }

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        showMessageBox('Please enter a valid email address.', 'error');
        return;
    }

    // Simulate sending message (replace with actual backend integration later)
    DOMElements.contactSubmitBtn.disabled = true;
    DOMElements.contactSubmitBtn.textContent = 'Sending...';

    try {
        // --- Placeholder for actual API call ---
        // In a real application, you would send this data to a backend API (e.g., Node.js, Python Flask)
        // that handles sending emails or storing messages in a database.
        // Example (conceptual fetch):
        /*
        const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, email, message })
        });

        if (response.ok) {
            showMessageBox('Your message has been sent successfully!', 'success');
            DOMElements.contactForm.reset(); // Clear form
        } else {
            const errorData = await response.json();
            showMessageBox(`Failed to send message: ${errorData.message || 'Server error.'}`, 'error');
        }
        */

        // For now, just simulate success after a delay
        await new Promise(resolve => setTimeout(resolve, 2000));
        showMessageBox('Thank you for your message! I will get back to you soon.', 'success');
        DOMElements.contactForm.reset(); // Clear form

    } catch (error) {
        console.error('Contact form submission error:', error);
        showMessageBox('There was an error sending your message. Please try again later.', 'error');
    } finally {
        DOMElements.contactSubmitBtn.disabled = false;
        DOMElements.contactSubmitBtn.textContent = 'Send Message';
    }
}

/* ======================================================= */
/* 15. GUESTBOOK INTEGRATION (FIREBASE)     */
/* ======================================================= */

/**
 * Initializes Firebase and sets up authentication.
 * This should be called once the DOM is loaded.
 */
async function initFirebase() {
    if (!firebaseConfig) {
        console.error("Firebase config is not defined. Guestbook functionality will be limited.");
        showMessageBox("Firebase is not configured. Guestbook features disabled.", "error");
        return;
    }

    try {
        // Dynamically import Firebase modules inside the async function
        const firebaseAppModule = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js");
        const firebaseAuthModule = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js");
        const firebaseFirestoreModule = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js");

        const { initializeApp } = firebaseAppModule;
        const { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } = firebaseAuthModule;
        const { getFirestore, collection, addDoc, query, onSnapshot, serverTimestamp } = firebaseFirestoreModule;

        app = initializeApp(firebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);

        // Sign in user
        if (initialAuthToken) {
            await signInWithCustomToken(auth, initialAuthToken);
            console.log("Signed in with custom token.");
        } else {
            await signInAnonymously(auth);
            console.log("Signed in anonymously.");
        }

        // Listen for auth state changes
        onAuthStateChanged(auth, (user) => {
            if (user) {
                userId = user.uid; // Firebase authenticated UID
                // Display userId in the UI (important for multi-user apps)
                const userIdDisplay = getElement('#guestbook-user-id');
                if (userIdDisplay) {
                    userIdDisplay.textContent = `Your User ID: ${userId}`;
                }
                console.log("Firebase Auth State Changed: Logged in as", userId);
            } else {
                // If not authenticated (e.g., token expired or no token), use a random UUID
                userId = generateUUID();
                const userIdDisplay = getElement('#guestbook-user-id');
                if (userIdDisplay) {
                    userIdDisplay.textContent = `Your User ID: (Anonymous) ${userId.substring(0, 8)}...`;
                }
                console.log("Firebase Auth State Changed: Logged out / Anonymous. Using generated ID:", userId);
            }
            appState.isAuthReady = true; // Mark auth as ready
            fetchGuestbookMessages(); // Start listening for messages after auth is ready
        });

    } catch (error) {
        console.error("Error initializing Firebase:", error);
        showMessageBox("Failed to initialize Firebase. Guestbook will not function.", "error");
    }
}

/**
 * Handles adding a new guestbook message to Firestore.
 * @param {Event} e - The form submission event.
 */
async function handleGuestbookSubmit(e) {
    e.preventDefault();

    if (!DOMElements.guestbookForm || !DOMElements.guestbookName || !DOMElements.guestbookMessage || !db || !appState.isAuthReady) {
        showMessageBox('Guestbook not ready. Please try again.', 'error');
        return;
    }

    const name = DOMElements.guestbookName.value.trim();
    const message = DOMElements.guestbookMessage.value.trim();

    if (!name || !message) {
        showMessageBox('Please enter your name and a message.', 'error');
        return;
    }

    if (!userId) {
        showMessageBox('User ID not available. Please wait or refresh.', 'error');
        return;
    }

    DOMElements.guestbookSubmitBtn.disabled = true;
    DOMElements.guestbookSubmitBtn.textContent = 'Posting...';

    try {
        // Store in public collection: /artifacts/{appId}/public/data/guestbook
        const guestbookRef = collection(db, `artifacts/${appId}/public/data/guestbook`);

        await addDoc(guestbookRef, {
            author: name,
            message: message,
            userId: userId, // Store the user ID (Firebase UID or generated UUID)
            timestamp: serverTimestamp() // Firestore server timestamp
        });

        showMessageBox('Message posted successfully!', 'success');
        DOMElements.guestbookForm.reset();
    } catch (error) {
        console.error('Error adding guestbook message:', error);
        showMessageBox('Failed to post message. Please try again.', 'error');
    } finally {
        DOMElements.guestbookSubmitBtn.disabled = false;
        DOMElements.guestbookSubmitBtn.textContent = 'Sign Guestbook';
    }
}

/**
 * Fetches and displays guestbook messages in real-time using onSnapshot.
 */
function fetchGuestbookMessages() {
    if (!db || !appState.isAuthReady || !DOMElements.guestbookMessagesContainer) {
        console.log("Guestbook message fetch skipped: DB not ready or container missing.");
        return;
    }

    const guestbookRef = collection(db, `artifacts/${appId}/public/data/guestbook`);
    // Note: orderBy is commented out as per instructions, but would typically be used for sorting
    // const q = query(guestbookRef, orderBy('timestamp', 'desc'));
    const q = query(guestbookRef); // Fetching without order for now

    onSnapshot(q, (snapshot) => {
        const messages = [];
        snapshot.forEach(doc => {
            const data = doc.data();
            messages.push({ id: doc.id, ...data });
        });

        // Sort in memory if orderBy is not used in query (as per instructions)
        messages.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));

        renderGuestbookMessages(messages);
    }, (error) => {
        console.error("Error fetching guestbook messages:", error);
        showMessageBox("Error loading guestbook messages.", "error");
    });
}

/**
 * Renders the fetched guestbook messages to the UI.
 * @param {Array<Object>} messages - An array of guestbook message objects.
 */
function renderGuestbookMessages(messages) {
    if (!DOMElements.guestbookMessagesContainer) return;

    DOMElements.guestbookMessagesContainer.innerHTML = ''; // Clear previous messages

    if (messages.length === 0) {
        DOMElements.guestbookMessagesContainer.innerHTML = `<p style="text-align: center; color: var(--text-color); opacity: 0.7;">No messages yet. Be the first to sign!</p>`;
        return;
    }

    messages.forEach(msg => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('guestbook-message');

        const timestampDate = msg.timestamp ? msg.timestamp.toDate() : new Date(); // Fallback to current date
        const formattedDate = timestampDate.toLocaleString('en-US', {
            year: 'numeric', month: 'short', day: 'numeric',
            hour: '2-digit', minute: '2-digit', hour12: true
        });

        messageElement.innerHTML = `
            <div class="message-header">
                <span class="message-author">${escapeHTML(msg.author)}</span>
                <span class="message-date">${formattedDate}</span>
            </div>
            <p class="message-content">${escapeHTML(msg.message)}</p>
            <span class="message-user-id" style="font-size: 0.75rem; color: var(--text-color); opacity: 0.6; display: block; text-align: right; margin-top: 5px;">
                User: ${escapeHTML(msg.userId)}
            </span>
        `;
        DOMElements.guestbookMessagesContainer.appendChild(messageElement);
    });
}

/**
 * Escapes HTML characters to prevent XSS.
 * @param {string} str - The string to escape.
 * @returns {string} The escaped string.
 */
function escapeHTML(str) {
    const div = document.createElement('div');
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
}

/* ======================================================= */
/* INITIALIZATION & EVENT LISTENERS         */
/* ======================================================= */

/**
 * Caches all necessary DOM elements.
 */
function cacheDOMElements() {
    DOMElements.header = getElement('.header');
    DOMElements.navbar = getElement('.navbar');
    DOMElements.navList = getElement('.nav-list');
    DOMElements.navLinks = getAllElements('.nav-link');
    DOMElements.menuIcon = getElement('.menu-icon');
    DOMElements.darkModeToggle = getElement('#dark-mode-toggle');
    DOMElements.themeCustomizerToggle = getElement('#theme-customizer-toggle');
    DOMElements.themeCustomizer = getElement('.theme-customizer');
    DOMElements.customizerCloseBtn = getElement('.customizer-close-btn');
    DOMElements.colorOptions = getAllElements('.color-box');
    DOMElements.fontSizeOptions = getAllElements('.font-size-btn');
    DOMElements.resetThemeBtn = getElement('#reset-theme-btn');
    DOMElements.skipLink = getElement('.skip-link');

    DOMElements.homeSection = getElement('#home');
    DOMElements.typedSubtitle = getElement('.multiple-text');
    DOMElements.liveTimeSpan = getElement('#live-time');
    DOMElements.homeButtons = getAllElements('.home-buttons .btn');
    DOMElements.homeProfileImg = getElement('.home-profile-img');
    DOMElements.homeImageBlob = getElement('.home-image-blob');

    DOMElements.scrollProgressBar = getElement('#scroll-progress-bar');
    DOMElements.backToTopBtn = getElement('#back-to-top');

    DOMElements.skillsChartCanvas = getElement('#skillsChart');

    DOMElements.contactForm = getElement('#contact-form');
    DOMElements.contactName = getElement('#contact-name');
    DOMElements.contactEmail = getElement('#contact-email');
    DOMElements.contactMessage = getElement('#contact-message');
    DOMElements.contactSubmitBtn = getElement('#contact-form button[type="submit"]');

    DOMElements.guestbookForm = getElement('#guestbook-form');
    DOMElements.guestbookName = getElement('#guestbook-name');
    DOMElements.guestbookMessage = getElement('#guestbook-message');
    DOMElements.guestbookSubmitBtn = getElement('#guestbook-form button[type="submit"]');
    DOMElements.guestbookMessagesContainer = getElement('.guestbook-messages');

    DOMElements.preloader = getElement('#preloader');
    DOMElements.preloaderText = getElement('.loader-text');

    DOMElements.cursorDot = getElement('.cursor-dot');
    DOMElements.cursorOutline = getElement('.cursor-outline');

    // Create message box elements dynamically if not already in HTML
    DOMElements.messageBox = getElement('#message-box');
    if (!DOMElements.messageBox) {
        const msgBox = document.createElement('div');
        msgBox.id = 'message-box';
        msgBox.style.cssText = `
            display: none;
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 30px;
            border-radius: var(--border-radius-md);
            color: var(--heading-color);
            font-size: 1rem;
            font-weight: 500;
            z-index: var(--z-index-modal);
            box-shadow: var(--shadow-md);
            text-align: center;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
            opacity: 0.95;
            min-width: 250px;
        `;
        document.body.appendChild(msgBox);
        DOMElements.messageBox = msgBox;

        const msgText = document.createElement('span');
        msgText.id = 'message-box-text';
        DOMElements.messageBox.appendChild(msgText);
        DOMElements.messageBoxText = msgText;

        const closeBtn = document.createElement('button');
        closeBtn.id = 'message-box-close-btn';
        closeBtn.innerHTML = '&times;'; // HTML entity for 'x'
        closeBtn.style.cssText = `
            background: none;
            border: none;
            color: inherit;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 5px;
            transition: transform var(--transition-fast);
        `;
        closeBtn.addEventListener('click', closeMessageBox);
        DOMElements.messageBox.appendChild(closeBtn);
        DOMElements.messageBoxCloseBtn = closeBtn;

        // Add specific styles for message box types
        const style = document.createElement('style');
        style.innerHTML = `
            #message-box.info { background-color: #3498db; }
            #message-box.success { background-color: #2ecc71; }
            #message-box.error { background-color: #e74c3c; }
        `;
        document.head.appendChild(style);
    }
}

/**
 * Adds all event listeners for interactive elements.
 */
function addAllEventListeners() {
    // Window scroll events
    window.addEventListener('scroll', debounce(() => {
        handleStickyHeader();
        updateScrollProgressBar();
        toggleBackToTopButton();
        highlightActiveNavLink();
    }, DEBOUNCE_DELAY));

    // Initial calls on page load
    window.addEventListener('load', () => {
        handleStickyHeader();
        updateScrollProgressBar();
        toggleBackToTopButton();
        highlightActiveNavLink();
        updateLiveTime(); // Initial call
        setInterval(updateLiveTime, 1000); // Update every second
    });

    // Navigation and Menu
    if (DOMElements.menuIcon) {
        DOMElements.menuIcon.addEventListener('click', toggleMobileMenu);
    }
    setupSmoothScrolling();

    // Back to Top button
    if (DOMElements.backToTopBtn) {
        DOMElements.backToTopBtn.addEventListener('click', scrollToTop);
    }

    // Theme Customizer
    initThemeCustomizer();

    // Ripple effect on all buttons with class 'btn'
    getAllElements('.btn').forEach(button => {
        button.addEventListener('click', addRippleEffect);
    });

    // Contact Form
    if (DOMElements.contactForm) {
        DOMElements.contactForm.addEventListener('submit', handleContactFormSubmit);
    }

    // Guestbook Form
    if (DOMElements.guestbookForm) {
        DOMElements.guestbookForm.addEventListener('submit', handleGuestbookSubmit);
    }
    if (DOMElements.messageBoxCloseBtn) {
        DOMElements.messageBoxCloseBtn.addEventListener('click', closeMessageBox);
    }
}


/**
 * Main initialization function, called when the DOM is fully loaded.
 */
document.addEventListener('DOMContentLoaded', async () => {
    cacheDOMElements(); // Cache elements first
    initPreloader();
    addAllEventListeners(); // Add all other event listeners

    // Initialize third-party libraries and complex features
    initCustomCursor(); // Requires GSAP
    initTypedText(); // Requires Typed.js
    initAOS(); // Requires AOS
    initSkillsChart(); // Requires Chart.js
    initParticlesJS(); // Requires particles.js

    // GSAP animations should be initialized after all relevant DOM elements are present
    // and after any preloader animations.
    initGSAPAnimations();

    // Firebase Initialization must be awaited as it contains async imports and auth
    await initFirebase();
});

/* ======================================================= */
/* END OF SCRIPT                        */
/* ======================================================= */
